\set ECHO all
CREATE EXTENSION plr;
-- make typenames available in the global namespace
select load_r_typenames();
 load_r_typenames 
------------------
 OK
(1 row)

--
-- test simple input/output types
--
CREATE OR REPLACE FUNCTION rint2(i int2) RETURNS int2 AS $$
return (as.integer(i))
$$ LANGUAGE plr;
select rint2(1::int2);
 rint2 
-------
     1
(1 row)

select rint2(NULL);
 rint2 
-------
      
(1 row)

CREATE OR REPLACE FUNCTION rint4(i int4) RETURNS int4 AS $$
return (as.integer(i))
$$ LANGUAGE plr;
select rint4(1::int4);
 rint4 
-------
     1
(1 row)

select rint4(NULL);
 rint4 
-------
      
(1 row)

CREATE OR REPLACE FUNCTION rint8(i int8) RETURNS int8 AS $$
return (as.integer(i))
$$ LANGUAGE plr;
select rint8(1::int8);
 rint8 
-------
     1
(1 row)

select rint8(NULL);
 rint8 
-------
      
(1 row)

CREATE OR REPLACE FUNCTION rbool(b bool) RETURNS bool AS $$
return (as.logical(b))
$$ LANGUAGE plr;
select rbool('t');
 rbool 
-------
 t
(1 row)

select rbool('f');
 rbool 
-------
 f
(1 row)

select rbool(NULL);
 rbool 
-------
 
(1 row)

CREATE OR REPLACE FUNCTION rfloat4(f float4) RETURNS float4 AS $$
return (as.numeric(f))
$$ LANGUAGE plr;
select rfloat4(1::int4);
 rfloat4 
---------
       1
(1 row)

select rfloat4(NULL);
 rfloat4 
---------
        
(1 row)

CREATE OR REPLACE FUNCTION rfloat8(f float8) RETURNS float8 AS $$
return (as.numeric(f))
$$ LANGUAGE plr;
select rfloat8(1::float8);
 rfloat8 
---------
       1
(1 row)

select rfloat8(NULL);
 rfloat8 
---------
        
(1 row)

--
-- user defined R function test
--
select install_rcmd('pg.test.install <-function(msg) {print(msg)}');
 install_rcmd 
--------------
 OK
(1 row)

create or replace function pg_test_install(text) returns text as 'pg.test.install(arg1)' language 'plr';
select pg_test_install('hello world');
 pg_test_install 
-----------------
 hello world
(1 row)

CREATE TABLE plr_modules (
	modseq int4,
	modsrc text
) DISTRIBUTED REPLICATED;
CREATE TABLE module_test (i int) DISTRIBUTED BY (i);
INSERT INTO module_test select * from generate_series(1, 10);
CREATE OR REPLACE FUNCTION pg_test_module_load(text) RETURNS TEXT AS
'pg.test.module.load(arg1)' LANGUAGE plr;
INSERT INTO plr_modules
VALUES (0, 'pg.test.module.load <-function(msg) {print(msg)}');
select reload_plr_modules();
 reload_plr_modules 
--------------------
 OK
(1 row)

-- force to reload on segment
select count(reload_plr_modules()) from module_test;
 count 
-------
    10
(1 row)

select pg_test_module_load('hello world');
 pg_test_module_load 
---------------------
 hello world
(1 row)

select count(pg_test_module_load('hello world')) from module_test;
 count 
-------
    10
(1 row)

--
-- a variety of plr functions
--
create or replace function throw_notice(text) returns text as 'pg.thrownotice(arg1)' language 'plr';
select throw_notice('hello');
NOTICE:  hello
 throw_notice 
--------------
 hello
(1 row)

create or replace function paste(_text,_text,text) returns text[] as 'paste(arg1,arg2, sep = arg3)' language 'plr';
select paste('{hello, happy}','{world, birthday}',' ');
              paste               
----------------------------------
 {"hello world","happy birthday"}
(1 row)

create or replace function vec(_float8) returns _float8 as 'arg1' language 'plr';
select vec('{1.23, 1.32}'::float8[]);
     vec     
-------------
 {1.23,1.32}
(1 row)

create or replace function vec(float, float) returns _float8 as 'c(arg1,arg2)' language 'plr';
select vec(1.23, 1.32);
     vec     
-------------
 {1.23,1.32}
(1 row)

create or replace function echo(text) returns text as 'print(arg1)' language 'plr';
select echo('hello');
 echo  
-------
 hello
(1 row)

create or replace function reval(text) returns text as 'eval(parse(text = arg1))' language 'plr';
select reval('a <- sd(c(1,2,3)); b <- mean(c(1,2,3)); a + b');
 reval 
-------
 3
(1 row)

create or replace function "commandArgs"() returns text[] as '' language 'plr';
select "commandArgs"();
                  commandArgs                   
------------------------------------------------
 {PL/R,--slave,--silent,--no-save,--no-restore}
(1 row)

create or replace function vec(float) returns text as 'c(arg1)' language 'plr';
select vec(1.23);
 vec  
------
 1.23
(1 row)

create or replace function reval(_text) returns text as 'eval(parse(text = arg1))' language 'plr';
select round(reval('{"sd(c(1.12,1.23,1.18,1.34))"}'::text[])::numeric,8);
   round    
------------
 0.09322911
(1 row)

create or replace function print(text) returns text as '' language 'plr';
select print('hello');
 print 
-------
 hello
(1 row)

create or replace function rcube(int) returns float as 'sq <- function(x) {return(x * x)}; return(arg1 * sq(arg1))' language 'plr';
select rcube(3);
 rcube 
-------
    27
(1 row)

create or replace function sd(_float8) returns float as 'sd(arg1)' language 'plr';
select round(sd('{1.23,1.31,1.42,1.27}'::_float8)::numeric,8);
   round    
------------
 0.08180261
(1 row)

create or replace function sd(_float8) returns float as '' language 'plr';
select round(sd('{1.23,1.31,1.42,1.27}'::_float8)::numeric,8);
   round    
------------
 0.08180261
(1 row)

create or replace function mean(_float8) returns float as '' language 'plr';
select mean('{1.23,1.31,1.42,1.27}'::_float8);
  mean  
--------
 1.3075
(1 row)

create or replace function sprintf(text,text,text) returns text as 'sprintf(arg1,arg2,arg3)' language 'plr';
select sprintf('%s is %s feet tall', 'Sven', '7');
       sprintf       
---------------------
 Sven is 7 feet tall
(1 row)

--
-- test aggregates
--
create table foo(f0 int, f1 text, f2 float8) distributed randomly;
insert into foo values(1,'cat1',1.21);
insert into foo values(2,'cat1',1.24);
insert into foo values(3,'cat1',1.18);
insert into foo values(4,'cat1',1.26);
insert into foo values(5,'cat1',1.15);
insert into foo values(6,'cat2',1.15);
insert into foo values(7,'cat2',1.26);
insert into foo values(8,'cat2',1.32);
insert into foo values(9,'cat2',1.30);
create or replace function r_median(_float8) returns float as 'median(arg1)' language 'plr';
select r_median('{1.23,1.31,1.42,1.27}'::_float8);
 r_median 
----------
     1.29
(1 row)

CREATE AGGREGATE "median" (sfunc = plr_array_accum, basetype = float8, stype = _float8, finalfunc = r_median);
select f1, "median"(f2) from foo group by f1 order by f1;
  f1  | median 
------+--------
 cat1 |   1.21
 cat2 |   1.28
(2 rows)

--create or replace function r_gamma(_float8) returns float as 'gamma(arg1)' language 'plr';
--select round(r_gamma('{1.23,1.31,1.42,1.27}'::_float8)::numeric,8);
--CREATE AGGREGATE gamma (sfunc = plr_array_accum, basetype = float8, stype = _float8, finalfunc = r_gamma);
--select f1, round(gamma(f2)::numeric,8) from foo group by f1 order by f1;
--
-- test returning vectors, arrays, matricies, and dataframes
-- as scalars, arrays, and records
--
create or replace function test_vt() returns text as 'array(1:10,c(2,5))' language 'plr';
select test_vt();
 test_vt 
---------
 1
(1 row)

create or replace function test_vi() returns int as 'array(1:10,c(2,5))' language 'plr';
select test_vi();
 test_vi 
---------
       1
(1 row)

create or replace function test_mt() returns text as 'as.matrix(array(1:10,c(2,5)))' language 'plr';
select test_mt();
 test_mt 
---------
 1
(1 row)

create or replace function test_mi() returns int as 'as.matrix(array(1:10,c(2,5)))' language 'plr';
select test_mi();
 test_mi 
---------
       1
(1 row)

create or replace function test_dt() returns text as 'as.data.frame(array(1:10,c(2,5)))[[1]]' language 'plr';
select test_dt();
 test_dt 
---------
 1
(1 row)

create or replace function test_di() returns int as 'as.data.frame(array(1:10,c(2,5)))[[1]]' language 'plr';
select test_di() as error;
 error 
-------
     1
(1 row)

create or replace function test_vta() returns text[] as 'array(1:10,c(2,5))' language 'plr';
select test_vta();
          test_vta          
----------------------------
 {{1,3,5,7,9},{2,4,6,8,10}}
(1 row)

create or replace function test_via() returns int[] as 'array(1:10,c(2,5))' language 'plr';
select test_via();
          test_via          
----------------------------
 {{1,3,5,7,9},{2,4,6,8,10}}
(1 row)

create or replace function test_mta() returns text[] as 'as.matrix(array(1:10,c(2,5)))' language 'plr';
select test_mta();
          test_mta          
----------------------------
 {{1,3,5,7,9},{2,4,6,8,10}}
(1 row)

create or replace function test_mia() returns int[] as 'as.matrix(array(1:10,c(2,5)))' language 'plr';
select test_mia();
          test_mia          
----------------------------
 {{1,3,5,7,9},{2,4,6,8,10}}
(1 row)

create or replace function test_dia() returns int[] as 'as.data.frame(array(1:10,c(2,5)))' language 'plr';
select test_dia();
          test_dia          
----------------------------
 {{1,3,5,7,9},{2,4,6,8,10}}
(1 row)

create or replace function test_dta() returns text[] as 'as.data.frame(array(1:10,c(2,5)))' language 'plr';
select test_dta();
          test_dta          
----------------------------
 {{1,3,5,7,9},{2,4,6,8,10}}
(1 row)

create or replace function test_dta1() returns text[] as 'as.data.frame(array(letters[1:10], c(2,5)))' language 'plr';
select test_dta1();
         test_dta1         
---------------------------
 {{a,c,e,g,i},{b,d,f,h,j}}
(1 row)

create or replace function test_dta2() returns text[] as 'as.data.frame(data.frame(letters[1:10],1:10))' language 'plr';
select test_dta2();
                           test_dta2                            
----------------------------------------------------------------
 {{a,1},{b,2},{c,3},{d,4},{e,5},{f,6},{g,7},{h,8},{i,9},{j,10}}
(1 row)

-- generates expected error
create or replace function test_dia1() returns int[] as 'as.data.frame(array(letters[1:10], c(2,5)))' language 'plr';
select test_dia1() as error;
ERROR:  invalid input syntax for integer: "a"
CONTEXT:  In PL/R function test_dia1
create or replace function test_dtup() returns setof record as 'data.frame(letters[1:10],1:10)' language 'plr';
select * from test_dtup() as t(f1 text, f2 int);
 f1 | f2 
----+----
 a  |  1
 b  |  2
 c  |  3
 d  |  4
 e  |  5
 f  |  6
 g  |  7
 h  |  8
 i  |  9
 j  | 10
(10 rows)

create or replace function test_mtup() returns setof record as 'as.matrix(array(1:15,c(5,3)))' language 'plr';
select * from test_mtup() as t(f1 int, f2 int, f3 int);
 f1 | f2 | f3 
----+----+----
  1 |  6 | 11
  2 |  7 | 12
  3 |  8 | 13
  4 |  9 | 14
  5 | 10 | 15
(5 rows)

create or replace function test_vtup() returns setof record as 'as.vector(array(1:15,c(5,3)))' language 'plr';
select * from test_vtup() as t(f1 int);
 f1 
----
  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
(15 rows)

create or replace function test_vint() returns setof int as 'as.vector(array(1:15,c(5,3)))' language 'plr';
select * from test_vint();
 test_vint 
-----------
         1
         2
         3
         4
         5
         6
         7
         8
         9
        10
        11
        12
        13
        14
        15
(15 rows)

--
-- try again with named tuple types
--
CREATE TYPE dtup AS (f1 text, f2 int);
CREATE TYPE mtup AS (f1 int, f2 int, f3 int);
CREATE TYPE vtup AS (f1 int);
create or replace function test_dtup1() returns setof dtup as 'data.frame(letters[1:10],1:10)' language 'plr';
select * from test_dtup1();
 f1 | f2 
----+----
 a  |  1
 b  |  2
 c  |  3
 d  |  4
 e  |  5
 f  |  6
 g  |  7
 h  |  8
 i  |  9
 j  | 10
(10 rows)

create or replace function test_dtup2() returns setof dtup as 'data.frame(c("c","qw","ax","h","k","ax","l","t","b","u"),1:10)' language 'plr';
select * from test_dtup2();
 f1 | f2 
----+----
 c  |  1
 qw |  2
 ax |  3
 h  |  4
 k  |  5
 ax |  6
 l  |  7
 t  |  8
 b  |  9
 u  | 10
(10 rows)

create or replace function test_mtup1() returns setof mtup as 'as.matrix(array(1:15,c(5,3)))' language 'plr';
select * from test_mtup1();
 f1 | f2 | f3 
----+----+----
  1 |  6 | 11
  2 |  7 | 12
  3 |  8 | 13
  4 |  9 | 14
  5 | 10 | 15
(5 rows)

create or replace function test_vtup1() returns setof vtup as 'as.vector(array(1:15,c(5,3)))' language 'plr';
select * from test_vtup1();
 f1 
----
  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
(15 rows)

--
-- test pg R support functions (e.g. SPI_exec)
--
create or replace function pg_quote_ident(text) returns text as 'pg.quoteident(arg1)' language 'plr';
select pg_quote_ident('Hello World');
 pg_quote_ident 
----------------
 "Hello World"
(1 row)

create or replace function pg_quote_literal(text) returns text as 'pg.quoteliteral(arg1)' language 'plr';
select pg_quote_literal('Hello''World');
 pg_quote_literal 
------------------
 'Hello''World'
(1 row)

create or replace function test_spi_t(text) returns text as '(pg.spi.exec(arg1))[[1]]' language 'plr';
select test_spi_t('select oid, typname from pg_type where typname = ''oid'' or typname = ''text''');
 test_spi_t 
------------
 25
(1 row)

create or replace function test_spi_ta(text) returns text[] as 'pg.spi.exec(arg1)' language 'plr';
select test_spi_ta('select oid, typname from pg_type where typname = ''oid'' or typname = ''text''');
     test_spi_ta      
----------------------
 {{25,text},{26,oid}}
(1 row)

create or replace function test_spi_tup(text) returns setof record as 'pg.spi.exec(arg1)' language 'plr';
select * from test_spi_tup('select oid, typname from pg_type where typname = ''oid'' or typname = ''text''') as t(typeid oid, typename name);
 typeid | typename 
--------+----------
     25 | text
     26 | oid
(2 rows)

create or replace function fetch_pgoid(text) returns int as 'pg.reval(arg1)' language 'plr';
select fetch_pgoid('BYTEAOID');
 fetch_pgoid 
-------------
          17
(1 row)

create or replace function test_spi_prep(text) returns text as 'sp <<- pg.spi.prepare(arg1, c(NAMEOID, NAMEOID)); print("OK")' language 'plr';
select test_spi_prep('select oid, typname from pg_type where typname = $1 or typname = $2');
 test_spi_prep 
---------------
 OK
(1 row)

create or replace function test_spi_execp(text, text, text) returns setof record as 'pg.spi.execp(pg.reval(arg1), list(arg2,arg3))' language 'plr';
select * from test_spi_execp('sp','oid','text') as t(typeid oid, typename name);
 typeid | typename 
--------+----------
     25 | text
     26 | oid
(2 rows)

--create or replace function test_spi_lastoid(text) returns text as 'pg.spi.exec(arg1); pg.spi.lastoid()/pg.spi.lastoid()' language 'plr';
--select test_spi_lastoid('insert into foo values(10,''cat3'',3.333)') as "ONE";
--
-- test NULL handling
--
CREATE OR REPLACE FUNCTION r_test (float8) RETURNS float8 AS 'arg1' LANGUAGE 'plr';
select r_test(null) is null as "NULL";
 NULL 
------
 t
(1 row)

CREATE OR REPLACE FUNCTION r_max (integer, integer) RETURNS integer AS 'if (is.null(arg1) && is.null(arg2)) return(NA);if (is.null(arg1)) return(arg2);if (is.null(arg2)) return(arg1);if (arg1 > arg2) return(arg1);arg2' LANGUAGE 'plr';
select r_max(1,2) as "TWO";
 TWO 
-----
   2
(1 row)

select r_max(null,2) as "TWO";
 TWO 
-----
   2
(1 row)

select r_max(1,null) as "ONE";
 ONE 
-----
   1
(1 row)

select r_max(null,null) is null as "NULL";
 NULL 
------
 t
(1 row)

--
-- test tuple arguments
--
create or replace function get_foo(int) returns foo as 'select * from foo where f0 = $1' language 'sql';
create or replace function test_foo(foo) returns foo as 'return(arg1)' language 'plr';
select * from test_foo(get_foo(1));
 f0 |  f1  |  f2  
----+------+------
  1 | cat1 | 1.21
(1 row)

--
-- test 2D array argument
--
create or replace function test_in_m_tup(_int4) returns setof record as 'arg1' language 'plr';
select * from test_in_m_tup('{{1,3,5},{2,4,6}}') as t(f1 int, f2 int, f3 int);
 f1 | f2 | f3 
----+----+----
  1 |  3 |  5
  2 |  4 |  6
(2 rows)

--
-- test 3D array argument
--
create or replace function arr3d(_int4,int4,int4,int4) returns int4 as '
if (arg2 < 1 || arg3 < 1 || arg4 < 1)
  return(NA)
if (arg2 > dim(arg1)[1] || arg3 > dim(arg1)[2] || arg4 > dim(arg1)[3])
  return(NA)
return(arg1[arg2,arg3,arg4])
' language 'plr' WITH (isstrict);
select arr3d('{{{111,112},{121,122},{131,132}},{{211,212},{221,222},{231,232}}}',2,3,1) as "231";
 231 
-----
 231
(1 row)

-- for sake of comparison, see what normal pgsql array operations produces
select f1[2][3][1] as "231" from (select '{{{111,112},{121,122},{131,132}},{{211,212},{221,222},{231,232}}}'::int4[] as f1) as t;
 231 
-----
 231
(1 row)

-- out-of-bounds, returns null
select arr3d('{{{111,112},{121,122},{131,132}},{{211,212},{221,222},{231,232}}}',1,4,1) is null as "NULL";
 NULL 
------
 t
(1 row)

select f1[1][4][1] is null as "NULL" from (select '{{{111,112},{121,122},{131,132}},{{211,212},{221,222},{231,232}}}'::int4[] as f1) as t;
 NULL 
------
 t
(1 row)

select arr3d('{{{111,112},{121,122},{131,132}},{{211,212},{221,222},{231,232}}}',0,1,1) is null as "NULL";
 NULL 
------
 t
(1 row)

select f1[0][1][1] is null as "NULL" from (select '{{{111,112},{121,122},{131,132}},{{211,212},{221,222},{231,232}}}'::int4[] as f1) as t;
 NULL 
------
 t
(1 row)

--
-- test 3D array return value
--
create or replace function arr3d(_int4) returns int4[] as 'return(arg1)' language 'plr' WITH (isstrict);
select arr3d('{{{111,112},{121,122},{131,132}},{{211,212},{221,222},{231,232}}}');
                               arr3d                               
-------------------------------------------------------------------
 {{{111,112},{121,122},{131,132}},{{211,212},{221,222},{231,232}}}
(1 row)

-- Test cursors: creating, scrolling forward, closing
CREATE OR REPLACE FUNCTION cursor_fetch_test(integer,boolean) RETURNS SETOF integer AS 'plan<-pg.spi.prepare("SELECT * FROM generate_series(1,10)"); cursor<-pg.spi.cursor_open("curs",plan); dat<-pg.spi.cursor_fetch(cursor,arg2,arg1); pg.spi.cursor_close(cursor); return (dat);' language 'plr';
SELECT * FROM cursor_fetch_test(1,true);
 cursor_fetch_test 
-------------------
                 1
(1 row)

SELECT * FROM cursor_fetch_test(2,true);
 cursor_fetch_test 
-------------------
                 1
                 2
(2 rows)

SELECT * FROM cursor_fetch_test(20,true);
 cursor_fetch_test 
-------------------
                 1
                 2
                 3
                 4
                 5
                 6
                 7
                 8
                 9
                10
(10 rows)

--Test cursors: Passing arguments to a plan
CREATE OR REPLACE FUNCTION cursor_fetch_test_arg(integer) RETURNS SETOF integer AS 'plan<-pg.spi.prepare("SELECT * FROM generate_series(1,$1)",c(INT4OID)); cursor<-pg.spi.cursor_open("curs",plan,list(arg1)); dat<-pg.spi.cursor_fetch(cursor,TRUE,arg1); pg.spi.cursor_close(cursor); return (dat);' language 'plr';
SELECT * FROM cursor_fetch_test_arg(3);
 cursor_fetch_test_arg 
-----------------------
                     1
                     2
                     3
(3 rows)

--Test bytea arguments and return values: serialize/unserialize
create or replace function test_serialize(text)
returns bytea as '
 mydf <- pg.spi.exec(arg1)
 return (mydf)
' language 'plr';
create or replace function restore_df(bytea)
returns setof record as '
 return (arg1)
' language 'plr';
select * from restore_df((select test_serialize('select oid, typname from pg_type where typname in (''oid'',''name'',''int4'')'))) as t(oid oid, typname name);
 oid | typname 
-----+---------
  19 | name
  23 | int4
  26 | oid
(3 rows)

CREATE OR REPLACE FUNCTION rlargeint8out(n int) RETURNS int8[] AS $$
matrix(2, 1, n)
$$ LANGUAGE plr;
CREATE OR REPLACE FUNCTION routfloat4(n int) RETURNS float4[] AS $$
vector(mode = "numeric", length = n)
$$ LANGUAGE plr;
SELECT rlargeint8out(10);
      rlargeint8out      
-------------------------
 {{2,2,2,2,2,2,2,2,2,2}}
(1 row)

SELECT routfloat4(10);
      routfloat4       
-----------------------
 {0,0,0,0,0,0,0,0,0,0}
(1 row)

SELECT count(rlargeint8out(15000));
 count 
-------
     1
(1 row)

SELECT count(routfloat4(15000));
 count 
-------
     1
(1 row)

--now cleaning 
-- start_ignore
DROP FUNCTION plr_call_handler() cascade; 
NOTICE:  drop cascades to 69 other objects
DETAIL:  drop cascades to language plr
drop cascades to extension plr
drop cascades to function rint2(smallint)
drop cascades to function rint4(integer)
drop cascades to function rint8(bigint)
drop cascades to function rbool(boolean)
drop cascades to function rfloat4(real)
drop cascades to function rfloat8(double precision)
drop cascades to function pg_test_install(text)
drop cascades to function pg_test_module_load(text)
drop cascades to function throw_notice(text)
drop cascades to function paste(text[],text[],text)
drop cascades to function vec(double precision[])
drop cascades to function vec(double precision,double precision)
drop cascades to function echo(text)
drop cascades to function reval(text)
drop cascades to function "commandArgs"()
drop cascades to function vec(double precision)
drop cascades to function reval(text[])
drop cascades to function print(text)
drop cascades to function rcube(integer)
drop cascades to function sd(double precision[])
drop cascades to function mean(double precision[])
drop cascades to function sprintf(text,text,text)
drop cascades to function r_median(double precision[])
drop cascades to function "median"(double precision)
drop cascades to function test_vt()
drop cascades to function test_vi()
drop cascades to function test_mt()
drop cascades to function test_mi()
drop cascades to function test_dt()
drop cascades to function test_di()
drop cascades to function test_vta()
drop cascades to function test_via()
drop cascades to function test_mta()
drop cascades to function test_mia()
drop cascades to function test_dia()
drop cascades to function test_dta()
drop cascades to function test_dta1()
drop cascades to function test_dta2()
drop cascades to function test_dia1()
drop cascades to function test_dtup()
drop cascades to function test_mtup()
drop cascades to function test_vtup()
drop cascades to function test_vint()
drop cascades to function test_dtup1()
drop cascades to function test_dtup2()
drop cascades to function test_mtup1()
drop cascades to function test_vtup1()
drop cascades to function pg_quote_ident(text)
drop cascades to function pg_quote_literal(text)
drop cascades to function test_spi_t(text)
drop cascades to function test_spi_ta(text)
drop cascades to function test_spi_tup(text)
drop cascades to function fetch_pgoid(text)
drop cascades to function test_spi_prep(text)
drop cascades to function test_spi_execp(text,text,text)
drop cascades to function r_test(double precision)
drop cascades to function r_max(integer,integer)
drop cascades to function test_foo(foo)
drop cascades to function test_in_m_tup(integer[])
drop cascades to function arr3d(integer[],integer,integer,integer)
drop cascades to function arr3d(integer[])
drop cascades to function cursor_fetch_test(integer,boolean)
drop cascades to function cursor_fetch_test_arg(integer)
drop cascades to function test_serialize(text)
drop cascades to function restore_df(bytea)
drop cascades to function rlargeint8out(integer)
drop cascades to function routfloat4(integer)
DROP TYPE IF EXISTS plr_environ_type cascade; 
NOTICE:  type "plr_environ_type" does not exist, skipping
DROP TYPE IF EXISTS r_typename cascade; 
NOTICE:  type "r_typename" does not exist, skipping
DROP TYPE IF EXISTS r_version_type CASCADE; 
NOTICE:  type "r_version_type" does not exist, skipping
DROP TABLE IF EXISTS plr_modules CASCADE; 
DROP TYPE IF EXISTS dtup CASCADE; 
DROP TYPE IF EXISTS mtup CASCADE; 
DROP TYPE IF EXISTS vtup CASCADE; 
DROP TABLE IF EXISTS foo CASCADE;
NOTICE:  drop cascades to function get_foo(integer)
DROP TABLE IF EXISTS module_test CASCADE;
-- end_ignore
